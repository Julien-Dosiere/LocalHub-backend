
#--------------------------PROJECTS---------------------------------------

#OK Return all projects with all datas without filtering
# ==> return an array of projects

{
  projects{
      id
      title
      description
      created_at
      expiration_date
      location
      lat
      long
      image
      archived
      userIsAuthor
      isFollowed
      author{
        name
        email
      }

      comments{
        content
      }
      followers{
        name
      }
  }
}
# No query variables required
 
#-------------------------------------------------

#OK Query one project with all datas according one specified Id
# ==> return a project object


query GetProjectByID($id: ID!) {
  project(id: $id) {
      id
      title
      description
      created_at
      expiration_date
      location
      lat
      long
      image
      archived
      isFollowed
      userIsAuthor
      author{
        id
        name
        email
      }
      needs{
        title
        description
      }
      comments{
        content
        author{
          name
          email
          created_at
        }
      }
      followers{
        id
        name
      }
      
  }
  
}
#query variables
{
	"id": 1
}
#-------------------------------------------------

#OK query all projects related to Author Id
# ==> return an array of projects


query GetProjectsByAuthorID ($id: ID!){
  user(id: $id){
    projectsCreated{
      id
      title
      description
      created_at
      expiration_date
      location
      lat
      long
      isFollowed
      userIsAuthor
      image
      archived
      author{
        name
        email
      }
    }
  }
}
#query variables
{
	"id": 1
}
#-------------------------------------------------

#OK Return projects related to geo position and scope (in meters)
# Auth non required
# ==> return an array of projects

query GetProjectsByGeo($lat: Float!, $long: Float!, $scope: Float!, $archived: Boolean!) {
  projectsByGeo(lat: $lat, long: $long, scope: $scope, archived: $archived) {
    title
    description
    created_at
    expiration_date
    location
    lat
    long
    isFollowed
    userIsAuthor
    author{
      name
      email
    }
    needs{
      id
      title
      completed
    }

    }
  
}
#query variables
{
	"lat": 2,
	"long": 1.9,
	"scope": 20000,
  "archived": false
}
#-------------------------------------------------

#OK create new project
# AUTHENTICATION REQUIRED
# ==> return the created project object

mutation CreateProject(
        $title: String!,
        $description: String!,
        $expiration_date: String!,
        $location: String!,
        $lat: Float!,
        $long: Float!,
        $image: String,
        $file: String,
        $needs: [NeedInput]
) {
  insertProject(
        title: $title,
        description: $description,
        expiration_date: $expiration_date,
        location: $location,
        lat: $lat,
        long: $long,
        image: $image,
        file: $file,
        needs: $needs
  ) {
    id
    title
    description
    created_at
    isFollowed
    userIsAuthor
    needs{
      id
      title
      project{
        id
        title}
    }
    author{
      name
    }
  }
}
#query variables
{
	"title": "new project",
	"description": "beautifull description",
	"expiration_date": "2004-10-19 10:23:54+02",
	"location": "address",
	"lat": 1.0001,
	"long": 1.0001,
	"image": "",
	"file": "",
	"needs": [
		{
			"title": "new need",
			"description": "new need description"
		},
		{
			"title": "new need 2",
			"description": "new need description"
		}
	]
}
#-------------------------------------------------


#OK Update Project with specified Id & return updated projected
# AUTHENTICATION REQUIRED via author profile
# ==> return the updated project object

mutation EditProject(
        $id: ID!,
        $title: String!,
        $description: String!,
        $expiration_date: String!,
        $location: String!,
        $lat: Float!,
        $long: Float!,
        $image: String,
        $file: String
) {
  editProject(
        id: $id,
        title: $title,
        description: $description,
        expiration_date: $expiration_date,
        location: $location,
        lat: $lat,
        long: $long,
        image: $image,
        file: $file
  ) {
    id
    title
    description
    userIsAuthor

  }
}

#query variables
{
	"id": 3,
	"title": "new project updated",
	"description": "beautifull description",
	"expiration_date": "2004-10-19 10:23:54+02",
	"location": "address",
	"lat": 1.0001,
	"long": 1.0001,
	"image": "",
	"file": ""
}
#-------------------------------------------------

# delete project with specified ID & return message
# AUTHENTICATION REQUIRED via author profile
# ==> return a payload object

mutation deleteProject($id: ID!) {
  deleteProject(id: $id){
      infos
      errors
  }   
}

#query variables
{
	"id": 4
}
#-------------------------------------------------



#-------------------------------------------------
#-------------------------------------------------
#-------------------------------------------------


             # NOT OK





# Return all favorite projects related to specified user id (as follower)

query GetFavoritesByUserID ($id: ID!){
  user(id: $id){
    favourite_projects{
      id
      title
      description
      created_at
      expiration_date
      location
      lat
      long
      scope
      west
      east
      north
      south
      image
      archived
      author{
        name
        email
      }
    }
  }
}



# archive project with specified ID & return archived project

mutation archiveProject($id: ID!) {
  archiveProject(id: $id) {
    id
    title
    description
    expiration_date
    location
    lat
    long
    scope
    west
    east
    north
    south
    image
    file
    archived
    author{
      name
      email
    }
    comments{
      description
      author{
        name
      }
    }
  }
}


#---------------------------NEEDS-----------------------------------------

# Create new need on specified project id & return created need

mutation createNeed($title: String!, $description: String!, $project_id: ID!) {
  insertNeed(title: $title, description: $description, project_id: $project_id) {
    id
    title
    description
    project_id
    completed
  }
}


# Update new need with specified id & return updated need

mutation updateNeed($title: String!, $description: String!, $id: ID!) {
  updateNeed(id: $id, title: $title, description: $description) {
    id
    title
    description
    project_id
    completed
  }
}


# Complete need with specified id & return updated need

mutation completeNeed($id: ID!) {
  completeNeed(id: $id) {
    id
    title
    description
    project_id
    completed
  }
}


# Complete need with specified id & return updated need

mutation deleteNeed($id: ID!) {
  deleteNeed(id: $id) {
    id
    title
    description
    project_id
    completed
  }
}

#----------------------COMMENTS---------------------------------------

# Create new comment & return message

mutation createComment($description: String!, $project_id: ID!, $author: ID!) {
  insertComment(description: $description, project_id: $project_id, author: $author) {
    msg
  }
}


# Update comment with specified ID & return message

mutation updateComment($id: ID!, $description: String!) {
  updateComment(id: $id, description: $description) {
    msg
  }
}


# Delete comment with specified ID & return message

mutation deleteComment($id: ID!, $description: String!) {
  deleteComment(id: $id, description: $description) {
    msg
  }
}
